// =============================================================================
// üí∏ PAYMENT MODEL - Historique des paiements
// File: backend/src/models/business/Payment.js
// =============================================================================

const { DataTypes } = require('sequelize');
const sequelize = require('../../config/database');

const Payment = sequelize.define('Payment', {
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true
  },
  
  // üîó Relations
  user_id: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: {
      model: 'users',
      key: 'id'
    },
    comment: 'Utilisateur ayant effectu√© le paiement'
  },
  
  subscription_id: {
    type: DataTypes.INTEGER,
    allowNull: true,
    references: {
      model: 'subscriptions',
      key: 'id'
    },
    comment: 'Abonnement concern√© (null pour paiements one-shot)'
  },
  
  plan_id: {
    type: DataTypes.INTEGER,
    allowNull: true,
    references: {
      model: 'plans',
      key: 'id'
    },
    comment: 'Plan pay√© au moment du paiement'
  },
  
  // üí∞ Informations financi√®res
  amount: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false,
    comment: 'Montant pay√©'
  },
  
  currency: {
    type: DataTypes.STRING(3),
    allowNull: false,
    comment: 'Devise du paiement'
  },
  
  exchange_rate: {
    type: DataTypes.DECIMAL(10, 4),
    allowNull: true,
    comment: 'Taux de change si conversion'
  },
  
  amount_local: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: true,
    comment: 'Montant en devise locale'
  },
  
  fees: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false,
    defaultValue: 0.00,
    comment: 'Frais de transaction'
  },
  
  net_amount: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false,
    comment: 'Montant net re√ßu'
  },
  
  // üè¶ Informations de paiement
  payment_method: {
    type: DataTypes.ENUM(
      'stripe',
      'paypal', 
      'bank_transfer',
      'mobile_money',
      'orange_money',
      'wave',
      'free_money'
    ),
    allowNull: false,
    comment: 'M√©thode de paiement'
  },
  
  payment_type: {
    type: DataTypes.ENUM('subscription', 'one_time', 'refund', 'chargeback'),
    allowNull: false,
    defaultValue: 'subscription',
    comment: 'Type de transaction'
  },
  
  // üìä Statut et suivi
  status: {
    type: DataTypes.ENUM(
      'pending',          // En attente
      'processing',       // En traitement
      'completed',        // Termin√© avec succ√®s
      'failed',           // √âchec
      'canceled',         // Annul√©
      'refunded',         // Rembours√©
      'chargeback'        // Litige/r√©trofacturation
    ),
    allowNull: false,
    defaultValue: 'pending',
    comment: 'Statut du paiement'
  },
  
  // üîß Int√©grations tierces
  provider_transaction_id: {
    type: DataTypes.STRING(200),
    allowNull: true,
    comment: 'ID transaction chez le prestataire'
  },
  
  provider_payment_id: {
    type: DataTypes.STRING(200),
    allowNull: true,
    comment: 'ID paiement chez le prestataire'
  },
  
  provider_response: {
    type: DataTypes.JSON,
    allowNull: true,
    comment: 'R√©ponse compl√®te du prestataire'
  },
  
  // üìÖ Dates importantes
  processed_at: {
    type: DataTypes.DATE,
    allowNull: true,
    comment: 'Date de traitement effectif'
  },
  
  failed_at: {
    type: DataTypes.DATE,
    allowNull: true,
    comment: 'Date d\'√©chec'
  },
  
  refunded_at: {
    type: DataTypes.DATE,
    allowNull: true,
    comment: 'Date de remboursement'
  },
  
  // üìù Informations suppl√©mentaires
  description: {
    type: DataTypes.STRING(500),
    allowNull: true,
    comment: 'Description du paiement'
  },
  
  failure_reason: {
    type: DataTypes.TEXT,
    allowNull: true,
    comment: 'Raison de l\'√©chec'
  },
  
  receipt_url: {
    type: DataTypes.STRING(500),
    allowNull: true,
    comment: 'URL du re√ßu'
  },
  
  // üåç G√©olocalisation
  country_code: {
    type: DataTypes.STRING(2),
    allowNull: true,
    comment: 'Code pays du paiement'
  },
  
  ip_address: {
    type: DataTypes.STRING(45),
    allowNull: true,
    comment: 'Adresse IP de la transaction'
  },
  
  // üìä M√©tadonn√©es
  metadata: {
    type: DataTypes.JSON,
    allowNull: true,
    defaultValue: {},
    comment: 'Donn√©es suppl√©mentaires pour analytics'
  }
  
}, {
  tableName: 'payments',
  timestamps: true,
  paranoid: false,
  
  indexes: [
    { fields: ['user_id'] },
    { fields: ['subscription_id'] },
    { fields: ['plan_id'] },
    { fields: ['status'] },
    { fields: ['payment_method'] },
    { fields: ['provider_transaction_id'] },
    { fields: ['processed_at'] },
    // Index pour analytics
    { fields: ['status', 'processed_at'] },
    { fields: ['payment_method', 'status'] },
    { fields: ['currency', 'processed_at'] }
  ],
  
  scopes: {
    completed: {
      where: { status: 'completed' }
    },
    failed: {
      where: { status: 'failed' }
    },
    pending: {
      where: { status: 'pending' }
    }
  }
});

module.exports = Payment;